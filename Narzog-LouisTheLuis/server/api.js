/*
|--------------------------------------------------------------------------
| api.js -- server routes
|--------------------------------------------------------------------------
|
| This file defines the routes for your server.
|
*/

const express = require("express");

// import models so we can interact with the database
const User = require("./models/user");
const ConstName = require("./models/constname");

const Star = require("./models/star");
const Point = require("./models/point");
const Constellation = require("./models/constellation");
const Data =  require("./models/data");
// import authentication library
const auth = require("./auth");

// api endpoints: all these paths will be prefixed with "/api/"
const router = express.Router();

//initialize socket
const socketManager = require("./server-socket");

router.post("/login", auth.login);
router.post("/logout", auth.logout);
router.get("/whoami", (req, res) => {
  if (!req.user) {
    // not logged in
    return res.send({});
  }
  // console.log("WE HAVE CONNECTED", req.user);
  res.send(req.user);
});

router.post("/initsocket", (req, res) => {
  // do nothing if user not logged in
  if (req.user) socketManager.addUser(req.user, socketManager.getSocketFromSocketID(req.body.socketid));
  res.send({});
});



// |------------------------------|
// | write your API methods below!|
// |------------------------------|

router.post("/score", auth.ensureLoggedIn, (req, res) => {
  var query = {'name': req.user.name};
  // req.newData.username = req.user.username;
  let nextscore = req.body.index + 1;
  User.updateOne(query, {"score" : nextscore }, {upsert: false}, function(err, doc) {
    if (err) return res.send(500, {error: err});
    return res.send('Succesfully saved.');
});
}) ;

router.post("/compscore", auth.ensureLoggedIn, (req, res) => {
  var query = {'name': req.user.name};
  // req.newData.username = req.user.username;
  let nextscore = req.body.index + 1;
  User.updateOne(query, {"currentcomp" : nextscore }, {upsert: false}, function(err, doc) {
    if (err) return res.send(500, {error: err});
    return res.send('Succesfully saved.');
});
}) ;

router.post("/finalscore", auth.ensureLoggedIn, (req, res) => {
  var query = {'name': req.user.name};
  // req.newData.username = req.user.username;
  let nextscore = req.body.index;
  User.updateOne(query, {"compscore" : nextscore }, {upsert: false}, function(err, doc) {
    if (err) return res.send(500, {error: err});
    return res.send('Succesfully saved.');
});
}) ;
router.post("/initial", auth.ensureLoggedIn, (req, res) => {
  var query = {'name': req.user.name};
  // req.newData.username = req.user.username;
  let nextscore = req.body.index;
  User.updateOne(query, {"initial" : nextscore }, {upsert: true}, function(err, doc) {
    if (err) return res.send(500, {error: err});
    return res.send('Succesfully saved.');
});
}) ;

router.post("/resetscore", auth.ensureLoggedIn, (req, res) => {
  var query = {'name': req.user.name};
  // req.newData.username = req.user.username;
  let nextscore = 0;
  User.updateOne(query, {"currentcomp" : nextscore }, {upsert: false}, function(err, doc) {
    if (err) return res.send(500, {error: err});
    return res.send('Succesfully saved.');
});
}) ;

router.get("/stars", (req, res) => {
  Star.findOne({index: req.query.index}).then((stars) => {
    res.send(stars);
  });
  
});
router.get("/starname", (req, res) => {
  Star.findOne({name: req.query.name}).then((stars) => {
    res.send(stars);
  });
  
});

router.get("/constellations", (req, res) => {
  Constellation.findOne({name: req.query.name}).then((constellations) => {
    res.send(constellations);
  });
  
});

router.get("/data", (req, res) => {
  Data.find({}).then((constellations) => {
    res.send(constellations);
  });
});


router.get("/using", (req, res) => {
  User.findOne({_id: req.query.user}).then((userinfo) => {
    res.send(userinfo);
  });
});

router.get("/leader", (req, res) => {
  User.find({}).then((userinfo) => {
    res.send(userinfo);
  });
});


router.post("/point", auth.ensureLoggedIn, (req, res) => {
  const newPoint = new Point({
    name:  req.user.name, // links to the _id of a parent story (_id is an autogenerated field by Mongoose).
    index: req.body.index,
  });
  newPoint.save().then( 

  Point.findAndModify({ name: req.user.name }, [], { $inc: { next: 1 } }, {}, function (err, counter) {
    if (err) throw err;
  })).then( 

  Point.findOne({name:  req.user.name}).then((userinfo) => {
    res.send(userinfo);
  
}) )}) ;

router.post("/firstpoint", auth.ensureLoggedIn, (req, res) => {
  const newPoint = new Point({

    name:  req.user.name, // links to the _id of a parent story (_id is an autogenerated field by Mongoose).
    index: req.body.index,
  });

  newPoint.save() 
});

router.post("/newdata", auth.ensureLoggedIn, (req, res) => {
  const newData = new ConstName({
    data:  req.body, // links to the _id of a parent story (_id is an autogenerated field by Mongoose).
  });

  newData.save() 
});

router.get("/constellationname", (req, res) => {
  ConstName.find({}).then((constellations) => {
    res.send(constellations);
  });
});



// anything else falls to this "not found" case
router.all("*", (req, res) => {
  console.log(`API route not found: ${req.method} ${req.url}`);
  res.status(404).send({ msg: "API route not found" });
});

module.exports = router;
